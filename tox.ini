[tox]
envlist =
    coverage-erase
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}
    flake8-main
    coverage-report
    build
    mypy
labels =
    update=update-{requirements, pre-commit, headers}
    prep-release=prep-release

[testenv]
package = wheel
wheel_build_env = build_wheel
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}: coverage-erase
deps = -r requirements/test/requirements.txt
commands =
    python assets/augment_pth_for_test_suite.py
    coverage run -m pytest {posargs}

[testenv:flake8-main]
base_python = py3.13
depends = coverage-erase
deps =
    -r requirements/test/requirements.txt
    uv
commands_pre =
    uv pip install git+https://github.com/pycqa/flake8.git
# `commands` is inherited from the default testenv, above.

[testenv:coverage-erase]
deps =
    coverage[toml]
skip_install = true
commands =
    coverage erase

[testenv:coverage-report]
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}
    flake8-main
deps =
    coverage[toml]
skip_install = true
commands_pre =
    - coverage combine
commands =
    coverage report
commands_post =
    coverage html --fail-under=0

[testenv:mypy]
deps = -r requirements/mypy/requirements.txt
setenv =
    MYPY_FORCE_COLOR=1
commands = mypy

[testenv:build]
base_python = py3.13
skip_install = true
deps =
    build
    twine
    uv
commands =
    python -m build --installer uv --outdir dist/
    twine check --strict dist/*

[testenv:update-{requirements, pre-commit, headers}]
base_python = py3.13
description = Update dependencies, requirements, pre-commit hooks, and headers
recreate = true
skip_install = true
deps =
    requirements: poetry
    requirements: poetry-plugin-export
    pre-commit: pre-commit
    pre-commit: upadup
    headers: chipshot
commands =
    # Update test requirements
    requirements: poetry update --directory="requirements/mypy" --lock
    requirements: poetry export --directory="requirements/mypy" --output="requirements.txt" --without-hashes
    requirements: poetry update --directory="requirements/test" --lock
    requirements: poetry export --directory="requirements/test" --output="requirements.txt" --without-hashes

    # Update pre-commit hook versions
    pre-commit: pre-commit autoupdate
    pre-commit: upadup

    # Update headers
    headers: chipshot --update changelog.d/fragment-template.rst.jinja src/ requirements/README.rst tests/ CHANGELOG.rst README.rst

[testenv:prep-release]
description = Make the changes needed to create a new release PR
skip_install = true
deps =
    poetry
    scriv
passenv =
    VERSION
commands =
    poetry version "{env:VERSION}"
    scriv collect
